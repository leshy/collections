// Generated by CoffeeScript 1.8.0
(function() {
  var collections;

  collections = require('./index');

  exports.mongo = {
    setUp: function(callback) {
      var mongo, mongodb;
      mongodb = require('mongodb');
      mongo = require('./serverside/mongodb');
      this.collection = mongo.MongoCollection.extend4000(collections.ReferenceMixin, collections.ModelMixin);
      this.db = new mongodb.Db('testdb', new mongodb.Server('localhost', 27017), {
        safe: true
      });
      this.db.open(callback);
      return this.c = new this.collection({
        db: this.db,
        collection: 'test'
      });
    },
    tearDown: function(callback) {
      return callback();
    },
    fancy: function(test) {
      var a, model;
      model = this.c.defineModel('testmodel', {
        bla: 3
      });
      a = new model();
      a.set({
        something: 666
      });
      return a.flush((function(_this) {
        return function(err, data) {
          return _this.c.findModel({
            id: a.id
          }, function(err, model) {
            test.equals(model.get('something'), 666);
            return model.remove(function() {
              return _this.c.findModel({
                id: a.id
              }, function(err, model) {
                test.equals(model, void 0);
                return test.done();
              });
            });
          });
        };
      })(this));
    }
  };

  exports.memory = {
    setUp: function(callback) {
      var memory;
      memory = require('./serverside/memory');
      this.collection = memory.MemoryCollection.extend4000(collections.ModelMixin);
      this.c = new this.collection();
      return callback();
    },
    basics: function(test) {
      var found;
      this.c.create({
        bla: 666,
        x: 3
      });
      this.c.create({
        bla: 614,
        x: 2
      });
      this.c.create({
        bla: 88,
        x: 3
      });
      test.deepEqual(this.c.collection, {
        '1': {
          bla: 666,
          x: 3,
          id: '1'
        },
        '2': {
          bla: 614,
          x: 2,
          id: '2'
        },
        '3': {
          bla: 88,
          x: 3,
          id: '3'
        }
      });
      found = [];
      return this.c.find({
        x: 3
      }, {}, (function(err, data) {
        test.equals(err, void 0);
        return found.push(data);
      }), function() {
        test.deepEqual(found, [
          {
            bla: 666,
            x: 3,
            id: 1
          }, {
            bla: 88,
            x: 3,
            id: 3
          }
        ]);
        return test.done();
      });
    },
    fancy: function(test) {
      var a, model;
      model = this.c.defineModel('testmodel', {
        bla: 3
      });
      a = new model();
      a.set({
        something: 666
      });
      return a.flush((function(_this) {
        return function(err, data) {
          return _this.c.findModel({
            id: a.id
          }, function(err, model) {
            test.equals(model.get('something'), 666);
            return model.remove(function() {
              return _this.c.findModel({
                id: a.id
              }, function(err, model) {
                test.equals(model, void 0);
                return test.done();
              });
            });
          });
        };
      })(this));
    }
  };

}).call(this);
