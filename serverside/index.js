// Generated by CoffeeScript 1.9.3
(function() {
  var AesMixin, Backbone, EncryptedMixin, _, algorithm, collections, crypto, helpers, memory, mongo, remotemodel;

  _ = require('underscore');

  mongo = require('./mongodb');

  memory = require('./memory');

  crypto = require('crypto');

  algorithm = 'aes-256-ctr';

  _.extend(exports, collections = require('../index'));

  exports.remotemodel = remotemodel = require('../remotemodel');

  Backbone = require('backbone4000');

  helpers = require('helpers');

  _ = require('underscore');

  exports.EncryptedMixin = EncryptedMixin = Backbone.Model.extend4000({
    patternIn: function(pattern) {
      var err;
      pattern = _.clone(pattern);
      try {
        if (pattern.id != null) {
          pattern.id = this.decrypt(pattern.id);
        }
      } catch (_error) {
        err = _error;
        console.log('cannot decrypt ', pattern._id, err, err.stack);
      }
      return this._super('patternIn', pattern);
    },
    patternOut: function(pattern) {
      pattern = this._super('patternOut', pattern);
      if (!pattern) {
        return;
      }
      pattern = _.clone(pattern);
      if (pattern.id != null) {
        pattern.id = this.encrypt(pattern.id);
      }
      return pattern;
    }
  });

  exports.AesMixin = AesMixin = Backbone.Model.extend4000({
    initialize: function() {
      if (!(this.password = this.get('password'))) {
        throw this.name + " need password";
      }
    },
    encrypt: function(text) {
      var cipher, crypted;
      cipher = crypto.createCipher(algorithm, this.password);
      crypted = cipher.update(text, 'utf8', 'base64');
      crypted += cipher.final('base64');
      return crypted;
    },
    decrypt: function(text) {
      var dec, decipher;
      decipher = crypto.createDecipher(algorithm, this.password);
      dec = decipher.update(text, 'base64', 'utf8');
      dec += decipher.final('utf8');
      return dec;
    }
  });

  exports.MongoCollection = mongo.MongoCollection.extend4000(collections.Core, collections.ModelMixin, collections.EventMixin, collections.ReferenceMixin, collections.RequestIdMixin);

  exports.MemoryCollection = memory.MemoryCollection.extend4000(collections.Core, collections.ModelMixin);

}).call(this);
